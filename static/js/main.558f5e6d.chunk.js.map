{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","components/Navigation.js","routes/Detail.js","App.js","serviceWorker.js","index.js"],"names":["About","MovieGenre","genre","alt","className","MoviePoster","poster","src","title","Movie","id","genres","synopsis","to","pathname","state","map","index","key","slice","Home","_getMovies","a","_callApi","movies","setState","_renderMovies","movie","title_english","medium_cover_image","this","fetch","then","response","json","data","catch","err","console","log","Component","Navigation","Detail","props","location","history","undefined","push","React","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAKeA,MAHf,WACI,OAAO,mD,4ECmCX,SAASC,EAAT,GAAiC,IAAZC,EAAW,EAAXA,MAAW,EAALC,IACvB,OACI,0BAAMC,UAAU,eAAeF,EAA/B,KAcR,SAASG,EAAT,GAAmC,IAAbC,EAAY,EAAZA,OAAOH,EAAK,EAALA,IACzB,OACI,yBAAKI,IAAMD,EAAQH,IAAKA,EAAKK,MAAOL,EAAKC,UAAU,iBAiB5CK,MApEf,YAAkD,IAAlCC,EAAiC,EAAjCA,GAAGF,EAA8B,EAA9BA,MAAMF,EAAwB,EAAxBA,OAAOK,EAAiB,EAAjBA,OAAOC,EAAU,EAAVA,SAE/B,OACG,kBAAC,IAAD,CACAC,GAAK,CACDC,SAAS,UAAD,OAAWJ,GACnBK,MAAM,CACFL,KACAF,MAAMA,EACNF,SACAK,SACAC,cAGH,yBAAKR,UAAU,SACX,yBAAKA,UAAU,gBACf,kBAACC,EAAD,CAAaC,OAAQA,EAAQH,IAAKK,KAGlC,yBAAKJ,UAAU,gBACX,4BAAKI,GACL,yBAAKJ,UAAW,gBACfO,EAAOK,KAAI,SAACd,EAAMe,GAAP,OAAiB,kBAAChB,EAAD,CAAYC,MAAOA,EAAOgB,IAAKD,QAE5D,yBAAKb,UAAU,kBACf,2BAAIQ,EAASO,MAAM,EAAE,KAArB,YC6BTC,E,2MAnDbL,MAAO,G,EASNM,W,sBAAY,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLC,EADK,OAGX,EAAKC,SAAS,CACZD,WAJS,2C,EAiBZE,cAAc,WAWb,OAVc,EAAKX,MAAMS,OAAOR,KAAI,SAACW,EAAMV,GAEzC,OAAO,kBAAC,EAAD,CACPP,GAAIiB,EAAMjB,GACVF,MAAOmB,EAAMC,cACbtB,OAAQqB,EAAME,mBACdlB,OAASgB,EAAMhB,OACfO,IAAKS,EAAMjB,GACXE,SAAUe,EAAMf,e,mFA9BlBkB,KAAKT,e,iCAeL,OAAOU,MAAM,iEACZC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAE,GAAQ,OAAOA,EAAKC,KAAKX,UAC9BY,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,Q,+BAiBjB,IACAb,EAAUM,KAAKf,MAAfS,OACP,OACA,yBAAKpB,UAAWoB,EAAS,MAAQ,eAC5BM,KAAKf,MAAMS,OAASM,KAAKJ,gBAAkB,e,GA9CjCc,aCGJC,MAPf,WACI,OAAO,6BACH,kBAAC,IAAD,CAAM5B,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCcO6B,E,4LAhBS,IAAD,EACaZ,KAAKa,MAA1BC,EADQ,EACRA,SAAUC,EADF,EACEA,aACKC,IAAnBF,EAAS7B,OACR8B,EAAQE,KAAK,O,+BAGZ,IACEH,EAAYd,KAAKa,MAAjBC,SACP,OAAGA,EAAS7B,MACT,8BAAO6B,EAAS7B,MAAMP,OAEd,S,GAZEwC,IAAMR,WCaZS,MARf,WACE,OAAO,kBAAC,IAAD,KACL,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAYhC,IACzC,kBAAC,IAAD,CAAO8B,KAAK,SAASE,UAAWpD,IAChC,kBAAC,IAAD,CAAOkD,KAAK,aAAaC,OAAO,EAAMC,UAAWV,MCAjCW,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.558f5e6d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction About(){\r\n    return <span> About this page</span>\r\n}\r\nexport default About;","import React from 'react';\r\nimport './Movie.css';\r\nimport propTypes from 'prop-types';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction Movie({id,title,poster,genres,synopsis}){\r\n    \r\n        return(\r\n           <Link\r\n           to ={{\r\n               pathname:`/movie/${id}`,\r\n               state:{\r\n                   id,\r\n                   title:title,\r\n                   poster,\r\n                   genres,\r\n                   synopsis\r\n               }\r\n           }}> \r\n                <div className=\"Movie\">\r\n                    <div className=\"Movie_Column\">\r\n                    <MoviePoster poster={poster} alt={title}/>\r\n                    </div>\r\n\r\n                    <div className=\"Movie_Column\">\r\n                        <h1>{title}</h1>\r\n                        <div className =\"Movie_Genres\">\r\n                        {genres.map((genre,index) => <MovieGenre genre={genre} key={index}></MovieGenre>)}\r\n                        </div>\r\n                        <div className=\"Movie_Synopsis\">\r\n                        <p>{synopsis.slice(0,140)}...</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n\r\n        )\r\n    }\r\nfunction MovieGenre({genre,alt}){\r\n    return(\r\n        <span className=\"Movie_Genre\">{genre} </span>\r\n    )\r\n}\r\n//함수를 선언할때 this 가생기고, 실제 실행시 바뀐다\r\n//render를 다른객체가 가져가면 그안에 this를 한 모든것이 바뀐다 따라서 항상 컴포넌트가 실행함\r\n// class MoviePoster extends Component{\r\n//     render(){\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"Movie poster\"/>\r\n//         )\r\n\r\n//     }\r\n// }\r\n\r\nfunction MoviePoster({poster,alt}){\r\n    return(\r\n        <img src ={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n    )\r\n}\r\n//props 만있는 dumb Component 이기때문에 함수형으로 바꿔주는게 좋다. state가없는 컴포넌트는 함수로 return 하는게 좋음 메모리관리차원\r\n\r\n\r\nMovie.propTypes ={\r\n    title:propTypes.string,\r\n    poster:propTypes.string,\r\n    genres:propTypes.array.isRequired,\r\n    synopsis:propTypes.string.isRequired \r\n};\r\n\r\nMoviePoster.propTypes={\r\n    poster:propTypes.string\r\n};\r\n\r\nexport default Movie;","import React, {Component} from 'react';\r\n\r\nimport './Home.css';\r\nimport Movie from '../components/Movie.js'\r\n\r\n    \r\nclass Home extends Component {\r\n\r\n  state= {\r\n  \r\n\r\n  }\r\n   componentDidMount(){\r\n    this._getMovies();\r\n  }\r\n\r\n\r\n   _getMovies =async () => {\r\n    const movies = await this._callApi();\r\n    \r\n    this.setState({\r\n      movies\r\n      //new js에서는 movies로 써도무방함.\r\n    });\r\n  }\r\n\r\n  _callApi(){\r\n    \r\n    return fetch(\"https://yts.lt/api/v2/list_movies.json?sort_by=download_count\")\r\n    .then(response=>response.json())\r\n    .then(json=> {return json.data.movies})\r\n    .catch(err=>console.log(err));\r\n \r\n  }\r\n   _renderMovies=()=>{\r\n    const movies =this.state.movies.map((movie,index)=> {\r\n      \r\n      return <Movie \r\n      id={movie.id}\r\n      title={movie.title_english} \r\n      poster={movie.medium_cover_image} \r\n      genres ={movie.genres}\r\n      key={movie.id}\r\n      synopsis={movie.synopsis}/>\r\n    });\r\n    return movies;\r\n   }\r\n\r\n  render(){\r\n    const {movies} = this.state; \r\n    return(\r\n    <div className={movies ? \"App\" : \"App-loading\"}>\r\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\r\n    </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\nfunction Navigation(){\r\n    return <div>\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/about\">About</Link>\r\n    </div>\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\n\r\nclass Detail extends React.Component {\r\n    componentDidMount(){\r\n        const {location, history} = this.props;\r\n        if(location.state === undefined){\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n    render(){\r\n        const {location} = this.props;\r\n        if(location.state){\r\n    return <span>{location.state.title}</span>;\r\n        }else{\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\nexport default Detail;","import React, {Component} from 'react';\nimport { HashRouter,Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Navigation from \"./components/Navigation\";\nimport Detail from \"./routes/Detail\";\n\nfunction App(){\n  return <HashRouter>\n    <Navigation/>\n    <Route path=\"/\" exact={true} component ={Home}/>\n    <Route path=\"/about\" component={About}/>\n    <Route path=\"/movie/:id\" exact={true} component={Detail}/>\n  </HashRouter>\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}